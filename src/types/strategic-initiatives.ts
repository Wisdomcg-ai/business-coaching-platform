// src/types/strategic-initiatives.ts

export type InitiativeCategory = 
  | 'attract' 
  | 'convert' 
  | 'deliver' 
  | 'delight' 
  | 'systems' 
  | 'people' 
  | 'profit' 
  | 'strategy';

export type InitiativeSourceType = 
  | 'client'     // Created by the client themselves
  | 'coach'      // Suggested by their coach
  | 'ai'         // Generated by AI based on assessment
  | 'roadmap';   // Added from revenue roadmap

export type InitiativePriority = 'low' | 'medium' | 'high' | 'critical';

export type InitiativeStatus = 'not_started' | 'in_progress' | 'completed' | 'on_hold';

export interface StrategicInitiative {
  id: string;
  user_id: string;
  business_id?: string;
  title: string;
  description?: string;
  category: InitiativeCategory;
  priority: InitiativePriority;
  status?: InitiativeStatus;
  
  // Source tracking
  source_type: InitiativeSourceType;
  coach_id?: string;  // If suggested by coach
  roadmap_item_id?: string;  // Reference to roadmap item
  assessment_suggestion_type?: string;  // Type of AI suggestion
  
  // Selection flags
  selected_for_action: boolean;
  selected_for_annual_plan: boolean;
  
  // Dates
  target_date?: string;
  start_date?: string;
  completed_date?: string;
  created_at: string;
  updated_at: string;
  
  // Additional metadata
  estimated_effort?: number;  // Hours or story points
  dependencies?: string[];    // IDs of other initiatives
  tags?: string[];
  notes?: string;
}

export interface RoadmapCompletion {
  id: string;
  user_id: string;
  business_id?: string;
  stage: string;           // 'foundation', 'traction', 'scaling'
  category: string;        // InitiativeCategory
  item_text: string;       // The actual roadmap item text
  completed: boolean;
  completed_at?: string;
  created_at: string;
  updated_at: string;
}

export interface AssessmentSuggestion {
  key: string;
  title: string;
  description: string;
  currentScore: number;
  maxScore: number;
  initiatives: {
    title: string;
    category: InitiativeCategory;
  }[];
}

export interface RevenueStage {
  id: string;
  name: string;
  range: string;
  min: number;
  max: number;
  priorities: Record<InitiativeCategory, string[]>;
}

export interface CategoryInfo {
  label: string;
  description: string;
  color: string;
}

export const categoryInfo: Record<InitiativeCategory, CategoryInfo> = {
  attract: {
    label: 'Attract',
    description: 'Marketing and lead generation initiatives',
    color: 'blue'
  },
  convert: {
    label: 'Convert',
    description: 'Sales and conversion optimization',
    color: 'green'
  },
  deliver: {
    label: 'Deliver',
    description: 'Service delivery and operations',
    color: 'purple'
  },
  delight: {
    label: 'Delight',
    description: 'Customer experience and retention',
    color: 'pink'
  },
  systems: {
    label: 'Systems',
    description: 'Processes, tools, and automation',
    color: 'gray'
  },
  people: {
    label: 'People',
    description: 'Team, culture, and human resources',
    color: 'yellow'
  },
  profit: {
    label: 'Profit',
    description: 'Financial management and profitability',
    color: 'emerald'
  },
  strategy: {
    label: 'Strategy',
    description: 'Strategic planning and vision',
    color: 'indigo'
  }
};

// Assessment data structure
export interface AssessmentData {
  id: string;
  user_id: string;
  assessment_type: 'comprehensive' | 'quick' | 'follow_up';
  status: 'draft' | 'in_progress' | 'completed';
  
  // Overall scores
  health_score: number;
  completion_percentage: number;
  
  // Section scores
  foundation_score: number;
  strategic_wheel_score: number;
  profitability_score: number;
  engines_score: number;
  disciplines_score: number;
  
  // Additional data
  revenue_stage: string;
  answers: Record<string, any>;
  recommendations?: string[];
  
  // Timestamps
  completed_by: string;
  created_by: string;
  created_at: string;
  updated_at: string;
}

// Coach suggestion types
export interface CoachSuggestion {
  id: string;
  coach_id: string;
  client_id: string;
  title: string;
  description?: string;
  category: InitiativeCategory;
  priority: InitiativePriority;
  reasoning?: string;      // Why the coach suggested this
  suggested_timeline?: string;
  suggested_resources?: string[];
  status: 'pending' | 'accepted' | 'declined' | 'modified';
  created_at: string;
  updated_at: string;
}

// AI suggestion pattern types
export interface AISuggestionPattern {
  id: string;
  assessment_score_range: string;  // e.g., '0-30', '31-60', '61-100'
  section_name: string;            // 'foundation', 'strategic_wheel', etc.
  revenue_stage: string;           // 'foundation', 'traction', 'scaling'
  suggested_initiatives: string[];
  priority_order: number;
  created_at: string;
}

// Utility types for filtering and sorting
export type InitiativeFilter = {
  category?: InitiativeCategory[];
  source_type?: InitiativeSourceType[];
  priority?: InitiativePriority[];
  status?: InitiativeStatus[];
  selected_for_annual_plan?: boolean;
  coach_id?: string;
  date_range?: {
    start: string;
    end: string;
  };
};

export type InitiativeSortField = 
  | 'created_at' 
  | 'updated_at' 
  | 'priority' 
  | 'title' 
  | 'target_date'
  | 'category';

export type SortDirection = 'asc' | 'desc';

export interface InitiativeSort {
  field: InitiativeSortField;
  direction: SortDirection;
}

// API response types
export interface InitiativesResponse {
  initiatives: StrategicInitiative[];
  total: number;
  page: number;
  limit: number;
  hasMore: boolean;
}

export interface RoadmapCompletionsResponse {
  completions: RoadmapCompletion[];
  summary: {
    total_items: number;
    completed_items: number;
    completion_percentage: number;
    by_stage: Record<string, {
      total: number;
      completed: number;
      percentage: number;
    }>;
  };
}

// Form types for creating/editing initiatives
export interface CreateInitiativeForm {
  title: string;
  description?: string;
  category: InitiativeCategory;
  priority: InitiativePriority;
  target_date?: string;
  estimated_effort?: number;
  tags?: string[];
  notes?: string;
}

export interface UpdateInitiativeForm extends Partial<CreateInitiativeForm> {
  id: string;
  status?: InitiativeStatus;
  selected_for_annual_plan?: boolean;
}

// Error types
export interface InitiativeError {
  code: string;
  message: string;
  field?: string;
  details?: Record<string, any>;
}

// Event types for real-time updates
export interface InitiativeEvent {
  type: 'created' | 'updated' | 'deleted' | 'selected' | 'completed';
  initiative: StrategicInitiative;
  user_id: string;
  timestamp: string;
}

export interface RoadmapCompletionEvent {
  type: 'completed' | 'uncompleted';
  completion: RoadmapCompletion;
  user_id: string;
  timestamp: string;
}